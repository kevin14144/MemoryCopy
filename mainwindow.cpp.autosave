#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "stdio.h"
#include "stdlib.h"
#include "windows.h"
#include "sharememory.h"
#include<qdebug.h>
#define SHAREMEM_NAME   "shareMemory"
#define BULID_MESSAGE   "Hello! I am burn at " __DATE__ " " __TIME__
//http://pws.niu.edu.tw/~ttlee/os.101.1/night/sharedMemory/
MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    connect(ui->btnReadData,SIGNAL(clicked(bool)),this,SLOT(on_pushButton_clicked()));
    connect(ui->btnWriteData,SIGNAL(clicked(bool)),this,SLOT(on_btnCopyData_clicked()));
    connect(ui->btnCreateMemory,SIGNAL(clicked(bool)),this,SLOT(on_btnCreateMemory_clicked()));


}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_btnCreateMemory_clicked()
{
    LPVOID  pBuf;
    HANDLE hFile;

    //Dose memory block is exist ?

    if(hFile == nullptr)//
    {
        char szFileName[]=SHAREMEM_NAME;
        char writeBuffer[128]={0};
        hFile=CreateFileMapping(
                    INVALID_HANDLE_VALUE,
                    NULL,
                    PAGE_READWRITE,
                    0,
                    sizeof(writeBuffer),
                    (LPCWSTR)szFileName
                    );

        if(hFile == nullptr)
        {
            qDebug()<<"Could not create file mapping object. Error Codes:"<< GetLastError();
            return;
        }

    }
    else
    {
        qDebug()<<"Share memory ready!\n";
    }

}

#include <QBitmap>
typedef struct _SendDataStruct{
    int ID = 0;
    int IDCollection[10] = {0};
    int ImageSize = 0;
    BYTE* Image;
} Data_Info;

int _dataLength =0;
void MainWindow::on_btnCopyData_clicked()
{
    ShareMemory* sharememory = new ShareMemory();
    Data_Info dataInfo;
    dataInfo.ID = 1;
    dataInfo.IDCollection[0] = 1;
    dataInfo.IDCollection[1] = 2;

 
    int imageSize =  qimg.byteCount();
    dataInfo.ImageSize = imageSize;
    int nStructSize = sizeof(Data_Info);
    int nSize = nStructSize + imageSize;
    _dataLength = nSize;

    BYTE *pTansData = new BYTE[nSize];

    memcpy(pTansData, &dataInfo, nStructSize);//Struct  pointer (start)
    memcpy(pTansData + nStructSize, qimg.data_ptr() , imageSize);//Image Pointer (Start)

    //Share Memory Blcok
    LPCWSTR memoryBLockName = (LPCWSTR)"UDE_SMer";

    sharememory->SetMemoryBlockName(memoryBLockName);
    sharememory->SetDataBufferSize(nSize);

    sharememory->CreateMemoryBlock();
    sharememory->OpenMemoryBlock();
    sharememory->GetMappingDataMemory();
    sharememory->WriteData(pTansData);

    delete []pTansData;
    pTansData = nullptr;
}


void MainWindow::on_pushButton_clicked()
{

    //Share memory Blcok
    ShareMemory* sharememory = new ShareMemory();
    LPCWSTR MemoryBlcokName = (LPCWSTR)"UDE_SMer";

    sharememory->SetMemoryBlockName(MemoryBlcokName);
    sharememory->SetDataBufferSize(_dataLength);
    sharememory->OpenMemoryBlock();
    sharememory->GetMappingDataMemory();


    BYTE* pData = new BYTE[_dataLength];//Create buffer, it's size is the same with sender memory
    sharememory->ReadData(pData);

    //Get data that about Data_Info.
    int nStructSize = sizeof(Data_Info);
    Data_Info dataInfo;
    memcpy(&dataInfo, pData, nStructSize);//Struct  pointer (start)

    int ID = dataInfo.ID;
    int ID1 = dataInfo.IDCollection[1];
    dataInfo.Image = new BYTE[dataInfo.ImageSize];
//    QImage qimg = QImage(100,100,QImage::Format_ARGB32);//Format_ARGB32
//    memcpy(qimg.data_ptr(), pData + nStructSize , dataInfo.ImageSize);//Image Pointer (Start)

    memcpy(dataInfo.Image, pData + nStructSize , dataInfo.ImageSize);//Image Pointer (Start)
QImage qimg;
qimg.data_ptr() ;

    QRgb s =qimg.pixel(1,1);
    int a = qGray(s);
    a=0;

    delete []pData;
    pData = nullptr;

}



